!function(){"use strict";var s="internal",o="__clientPorts",i="__dbName",a="__storeName",c=[function(e){e.database.createObjectStore(e.storeName)},function(e){e.database.createObjectStore(s)}];function e(e,t){e=e||"app-mirror",t=t||"mirrored_data",this[i]=e,this[a]=t,this[o]=new Array,this.__dbOpens=null,this.openDb(),self.addEventListener("unhandledrejection",function(e){console.error(e)}),self.addEventListener("error",function(e){console.error(e)}),this.supportsIndexedDB=null!=self.indexedDB,console.log("AppIndexedDBMirrorWorker started...")}e.prototype={openDb:function(){return this.__dbOpens=this.__dbOpens||new Promise(function(e,t){console.log("Opening database..");var r=indexedDB.open(this[i],2);r.onupgradeneeded=function(e){console.log("Upgrade needed:",e.oldVersion,"=>",e.newVersion);for(var t={database:r.result,storeName:this[a],dbName:this[i]},n=e.oldVersion;n<e.newVersion;++n)c[n]&&c[n].call(this,t)}.bind(this),r.onsuccess=function(){console.log("Database opened."),e(r.result)},r.onerror=function(){t(r.error)}}.bind(this)),this.__dbOpens},closeDb:function(){return null==this.__dbOpens?Promise.resolve():this.openDb().then(function(e){this.__dbOpens=null,console.log("Closing database.."),e.close()}.bind(this))},operateOnStore:function(i,a,c){var d=Array.from(arguments).slice(3);return this.openDb().then(function(o){return console.log("Store operation:",i,a,c,d),new Promise(function(e,t){try{var n=o.transaction(a,c),r=n.objectStore(a),s=r[i].apply(r,d)}catch(e){return t(e)}n.oncomplete=function(){e(s.result)},n.onabort=function(){t(n.error)}})})},get:function(e,t){return this.operateOnStore("get",e,"readonly",t)},set:function(e,t,n){return this.operateOnStore("put",e,"readwrite",n,t)},clear:function(e){return this.operateOnStore("clear",e,"readwrite")},transaction:function(e,t,n){switch(n=n||null,e){case"get":return this.get(this[a],t);case"set":return this.set(this[a],t,n)}return Promise.reject(new Error("Method not supported: "+e))},validateSession:function(r){return Promise.all([this.openDb(),this.get(s,"session")]).then(function(e){e[0];var t=e[1],n=[];r!==t&&(null!=t&&n.push(this.clear(this[a])),n.push(this.set(s,"session",r)))}.bind(this))},registerClient:function(t){t.addEventListener("message",function(e){this.handleClientMessage(e,t)}.bind(this)),!t in this[o]&&this[o].push(t),t.start(),t.postMessage({type:"app-mirror-connected",supportsIndexedDB:this.supportsIndexedDB}),console.log("New client connected.")},handleClientMessage:function(e,t){if(e.data){var n=e.data.id;switch(e.data.type){case"app-mirror-close-db":this.closeDb().then(function(){t.postMessage({type:"app-mirror-db-closed",id:n})});case"app-mirror-validate-session":this.validateSession(e.data.session).then(function(){t.postMessage({type:"app-mirror-session-validated",id:n})});break;case"app-mirror-transaction":this.transaction(e.data.method,e.data.key,e.data.value).then(function(e){t.postMessage({type:"app-mirror-transaction-result",id:n,result:e})});break;case"app-mirror-disconnect":var r=this[o].indexOf(t);-1!==r&&this[o].splice(r,1)}}}},self.appIndexedDBMirrorWorker=new e,self.addEventListener("connect",function(e){appIndexedDBMirrorWorker.registerClient(e.ports[0])})}();